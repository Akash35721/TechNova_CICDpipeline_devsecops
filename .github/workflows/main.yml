# --- .github/workflows/main.yml (The Final State Pull Version) ---

name: TechNova CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  provision:
    name: 'Terraform Provisioning'
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get_ip.outputs.ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # --- THIS IS THE FINAL FIX ---
      # This version reads the IP directly from the Terraform state on S3,
      # bypassing the buggy `terraform output` command on re-runs.
      - name: Get Public IP Address
        id: get_ip
        run: |
          # Check if the local ip_address.txt file was created (first run).
          if [ -f ip_address.txt ]; then
            echo "IP file found (first run). Reading IP from file."
            ip_address=$(cat ip_address.txt)
          else
            # If the file does not exist (re-run), pull the state from S3 and parse it.
            echo "IP file not found (re-run). Reading IP directly from Terraform state."
            ip_address=$(terraform state pull | jq -r '.resources[] | select(.type == "aws_instance" and .name == "technova_server") | .instances[0].attributes.public_ip')
          fi
          echo "ip=${ip_address}" >> $GITHUB_OUTPUT

  deploy:
    name: 'Build and Deploy Application'
    runs-on: ubuntu-latest
    needs: provision

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.provision.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Wait for the Docker daemon itself to be responsive
            echo "Connecting to server... Waiting for Docker daemon to start..."
            for i in {1..30}; do
              if sudo docker info &> /dev/null; then
                echo "Docker daemon is running."
                break
              fi
              echo "Still waiting for Docker daemon... (attempt $i of 30)"
              sleep 5
            done

            if ! sudo docker info &> /dev/null; then
              echo "FATAL: Docker daemon did not start in time."
              exit 1
            fi
            
            # Set permissions on the docker socket
            sudo chmod 666 /var/run/docker.sock

            # Run the deployment commands
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest
            docker stop technova-app || true
            docker rm technova-app || true
            docker run -d --name technova-app -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest
            echo "Deployment to EC2 successful!"