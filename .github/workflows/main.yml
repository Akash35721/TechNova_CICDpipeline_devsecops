name: TechNova CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  provision:
    name: 'Terraform Provisioning'
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get_ip.outputs.ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Ensure Instance is Running and Get IP
        id: get_ip
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=TechNova-Server-Terraform" "Name=instance-state-name,Values=running,stopped" --query "Reservations[0].Instances[0].InstanceId" --output text)
          if [ "$INSTANCE_ID" == "None" ]; then
            echo "No running or stopped instance found with tag 'TechNova-Server-Terraform'."
            exit 1
          fi
          echo "Found Instance ID: $INSTANCE_ID"
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          echo "Instance state is: $INSTANCE_STATE"
          if [ "$INSTANCE_STATE" == "stopped" ]; then
            echo "Instance is stopped. Sending start command..."
            aws ec2 start-instances --instance-ids $INSTANCE_ID
            echo "Waiting for instance to enter 'running' state..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            echo "Instance is now running."
          elif [ "$INSTANCE_STATE" == "terminated" ]; then
            echo "FATAL: The instance has been terminated. A new 'terraform apply' is required."
            exit 1
          fi
          ip_address=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Instance Public IP: $ip_address"
          echo "ip=${ip_address}" >> $GITHUB_OUTPUT

  sonarqube:
    name: 'SonarQube Code Analysis'
    runs-on: ubuntu-latest
    outputs:
      quality_gate_passed: ${{ steps.quality_gate.outputs.quality_gate_passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check Quality Gate Status
        id: quality_gate
        run: |
          echo "Waiting for Quality Gate result..."
          sleep 30
          QUALITY_GATE_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Akash35721_TechNova_CICDpipeline_devsecops" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          if [ "$QUALITY_GATE_STATUS" = "OK" ]; then
            echo "✅ Quality Gate PASSED - Deployment can proceed"
            echo "quality_gate_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Quality Gate FAILED - Deployment will be blocked"
            echo "quality_gate_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Send SonarQube Results via Email
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: "TechNova SonarQube Analysis Results - ${{ steps.quality_gate.outputs.quality_gate_passed == 'true' && '✅ PASSED' || '❌ FAILED' }}"
          body: |
            SonarQube analysis completed for commit ${{ github.sha }}.
            🎯 Quality Gate Status: ${{ steps.quality_gate.outputs.quality_gate_passed == 'true' && 'PASSED ✅' || 'FAILED ❌' }}
            ${{ steps.quality_gate.outputs.quality_gate_passed == 'true' && '🚀 Deployment will proceed automatically.' || '🛑 Deployment has been BLOCKED due to quality issues.' }}
            View detailed results at: https://sonarcloud.io/project/overview?id=Akash35721_TechNova_CICDpipeline_devsecops
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: TechNova CI/CD Pipeline

  deploy:
    name: 'Build, Deploy, and Monitor'
    runs-on: ubuntu-latest
    needs: [provision, sonarqube]
    if: needs.sonarqube.outputs.quality_gate_passed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest

      - name: Deploy to EC2 and Update DNS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.provision.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Ensure Docker is running and permissions are set
            echo "Ensuring Docker service is running..."
            sudo systemctl start docker
            echo "Connecting to server... Waiting for Docker daemon to start..."
            for i in {1..30}; do
              if sudo docker info &> /dev/null; then
                echo "Docker daemon is running."
                break
              fi
              echo "Still waiting for Docker daemon... (attempt $i of 30)"
              sleep 5
            done
            if ! sudo docker info &> /dev/null; then
              echo "FATAL: Docker daemon did not start in time."
              exit 1
            fi
            sudo chmod 666 /var/run/docker.sock
            
            # Update DuckDNS with this server's IP address
            echo "Updating DuckDNS..."
            curl "https://www.duckdns.org/update?domains=${{ secrets.DUCKDNS_DOMAIN }}&token=${{ secrets.DUCKDNS_TOKEN }}&ip="
            
            # Create the docker network if it doesn't exist
            docker network create technova_network 2>/dev/null || echo "Network technova_network already exists"

            # Stop and remove any old containers
            docker stop technova-app 2>/dev/null || echo "Container technova-app was not running"
            docker rm technova-app 2>/dev/null || echo "Container technova-app did not exist"
            docker stop caddy 2>/dev/null || echo "Container caddy was not running"
            docker rm caddy 2>/dev/null || echo "Container caddy did not exist"

            # Pull the latest application image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest
            
            # Run your Flask application on the shared network
            docker run -d \
              --network technova_network \
              --name technova-app \
              -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              --restart always \
              ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest
              
            # Run the Caddy web server with the new DuckDNS domain
            docker run -d \
              -p 80:80 \
              -p 443:443 \
              -p 443:443/udp \
              --network technova_network \
              --name caddy \
              --restart always \
              caddy \
              caddy reverse-proxy --from ${{ secrets.DUCKDNS_DOMAIN }}.duckdns.org --to technova-app:80
              
            echo "Deployment completed successfully!"

      - name: Install and Configure CloudWatch Agent
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.provision.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Install CloudWatch Agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
            
            # Create CloudWatch Agent config file
            sudo bash -c 'cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json <<EOF
            {
              "agent": {
                "run_as_user": "root"
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/lib/docker/containers/*/*.log",
                        "log_group_name": "TechNova-App-Logs",
                        "log_stream_name": "{instance_id}-docker"
                      },
                      {
                        "file_path": "/var/log/auth.log",
                        "log_group_name": "TechNova-Security-Logs",
                        "log_stream_name": "{instance_id}-auth"
                      },
                      {
                        "file_path": "/var/log/syslog",
                        "log_group_name": "TechNova-System-Logs",
                        "log_stream_name": "{instance_id}-syslog"
                      }
                    ]
                  }
                }
              }
            }
            EOF'

            # Start the CloudWatch Agent
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
            echo "CloudWatch Agent configured and started."