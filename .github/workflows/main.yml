# --- .github/workflows/main.yml (Final Permission Fix) ---

name: TechNova CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  provision:
    name: 'Terraform Provisioning'
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.read_ip.outputs.ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Read Public IP from file
        id: read_ip
        run: |
          ip_address=$(cat ip_address.txt)
          echo "ip=${ip_address}" >> $GITHUB_OUTPUT

  deploy:
    name: 'Build and Deploy Application'
    runs-on: ubuntu-latest
    needs: provision

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest

      # --- THIS IS THE FIX ---
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.provision.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Wait for Docker to be installed
            echo "Connecting to server... Waiting for Docker to start..."
            for i in {1..30}; do
              if command -v docker &> /dev/null; then
                echo "Docker command is available."
                break
              fi
              echo "Still waiting for Docker command... (attempt $i of 30)"
              sleep 5
            done

            # --- THIS IS THE KEY FIX ---
            # Forcefully set permissions on the docker socket to allow access.
            echo "Setting permissions for Docker socket..."
            sudo chmod 666 /var/run/docker.sock

            # Now, run the deployment commands
            echo "Pulling latest image from DockerHub..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest

            echo "Stopping and removing any old container..."
            sudo docker stop technova-app || true
            sudo docker rm technova-app || true

            echo "Starting new container..."
            sudo docker run -d --name technova-app -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/technova-app:latest
            echo "Deployment to EC2 successful!"